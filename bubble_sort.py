# coding: utf-8

"""
Сортировка пузырьком (Bubble sort)

Простой алгоритм сортировки. Для понимания и реализации этот алгоритм — простейший,
но эффективен он лишь для небольших массивов. Сложность алгоритма: O(n²).

Алгоритм считается учебным и практически не применяется вне учебной литературы,
вместо него на практике применяются более эффективные алгоритмы сортировки.

Алгоритм состоит из повторяющихся проходов по сортируемому массиву.
За каждый проход элементы последовательно сравниваются попарно и, если порядок в паре неверный,
выполняется обмен элементов.

Проходы по массиву повторяются N-1 раз или до тех пор, пока на очередном проходе не окажется,
что обмены больше не нужны, что означает — массив отсортирован.

При каждом проходе алгоритма по внутреннему циклу,
очередной наибольший элемент массива ставится на своё место в конце массива рядом с предыдущим
"наибольшим элементом, а наименьший элемент перемещается на одну позицию к началу массива
("всплывает" до нужной позиции как пузырёк в воде, отсюда и название алгоритма).

http://ru.wikipedia.org/wiki/Сортировка_пузырьком
"""


def swap(arr, i1, i2):
    """Функция меняет местами элементы массива"""
    temp = arr[i1]
    arr[i1] = arr[i2]
    arr[i2] = temp


def bubble_sort(arr):
    """Сортировка пузырьком"""

    # кол-во элементов в последовательности
    n = len(arr)

    for i in xrange(n):
        swapped = False
        for j in xrange(i+1, n):
            j = n - j  # начинаем обход с конца последовательности
            if arr[j] < arr[j-1]:
                swap(arr, j, j-1)
                swapped = True
        if not swapped:
            break
    return arr


import time
import random

arr = list(range(10000))
random.shuffle(arr)

start_cpu = time.clock()
start_real = time.time()

out = bubble_sort(arr)

end_cpu = time.clock()
end_real = time.time()

print 'Тест: %s' % (out[:20] == list(range(20)))
print 'Процессорное время в секундах %f' % (end_cpu - start_cpu)
print 'Действительное время в секундах %f' % (end_real - start_real)
